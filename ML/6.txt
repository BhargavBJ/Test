import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
def kernel(point, xmat, k):
    m, n = np.shape(xmat)
    weights = np.mat(np.eye(m))
    for j in range(m):
        diff = point - xmat[j]
        weights[j, j] = np.exp(diff * diff.T / (-2.0 * k**2))
    return weights
def localWeight(point, xmat, ymat, k):
    wei = kernel(point, xmat, k)
    W = (xmat.T * (wei * xmat)).I * (xmat.T * (wei * ymat.T))
    return W
def localWeightRegression(xmat, ymat, k):
    m, n = np.shape(xmat)
    ypred = np.zeros(m)
    for i in range(m):
        ypred[i] = xmat[i] * localWeight(xmat[i], xmat, ymat, k)
    return ypred
def graphPlot(X, ypred, bill, tip):
    sortindex = X[:, 1].argsort(0)
    xsort = X[sortindex][:, 0]
    fig = plt.figure()
    ax = fig.add_subplot(1, 1, 1)
    ax.scatter(bill, tip, color='green')
    ax.plot(xsort[:, 1], ypred[sortindex], color='red', linewidth=5)
    plt.xlabel('Total bill')
    plt.ylabel('Tip')
    plt.show()
data = pd.read_csv('Program6_dataset_tips.csv')
bill = np.array(data.total_bill)
tip = np.array(data.tip)
mbill = np.mat(bill)
mtip = np.mat(tip)
m = np.shape(mbill)[1]
one = np.mat(np.ones(m))
X = np.hstack((one.T, mbill.T))  
ypred = localWeightRegression(X, mtip, 9)
graphPlot(X, ypred, bill, tip)


import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
def kernel(point, xmat, k):
    m, n = np.shape(xmat)
    weights = np.asmatrix(np.eye(m))
    for j in range(m):
        diff = point - xmat[j]
        weights[j, j] = np.exp(diff * diff.T / (-2.0 * k**2))
    return weights
def localWeight(point, xmat, ymat, k):
    wei = kernel(point, xmat, k)
    W = (xmat.T * (wei * xmat)).I * (xmat.T * (wei * ymat.T))
    return W
def localWeightRegression(xmat, ymat, k):
    m, n = np.shape(xmat)
    ypred = np.zeros(m)
    for i in range(m):
        ypred[i] = xmat[i] * localWeight(xmat[i], xmat, ymat, k)
    return ypred
def graphPlot(X, ypred, bill, tip):
    sortindex = X[:, 1].argsort(0)
    xsort = X[sortindex][:, 0]
    fig = plt.figure()
    ax = fig.add_subplot(1, 1, 1)
    ax.scatter(bill, tip, color='green')
    ax.plot(xsort[:, 1], ypred[sortindex], color='red', linewidth=5)
    plt.xlabel('Total bill')
    plt.ylabel('Tip')
    plt.show()
data = pd.read_csv('/content/tip.csv')
bill = np.array(data.total_bill)
tip = np.array(data.tip)
mbill = np.asmatrix(bill)
mtip = np.asmatrix(tip)
m = np.shape(mbill)[1]
one = np.asmatrix(np.ones(m))
X = np.hstack((one.T, mbill.T))  
ypred = localWeightRegression(X, mtip, 9)
graphPlot(X, ypred, bill, tip)




import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
def kernel(point, xmat, k):
    m = xmat.shape[0]
    weights = np.eye(m)
    for j in range(m):
        diff = point - xmat[j]
        weights[j, j] = np.exp(-(diff @ diff.T) / (2.0 * k**2))
    return weights
def localWeight(point, xmat, ymat, k):
    wei = kernel(point, xmat, k)
    W = np.linalg.inv(xmat.T @ wei @ xmat) @ (xmat.T @ wei @ ymat)
    return W
def localWeightRegression(xmat, ymat, k):
    m = xmat.shape[0]
    ypred = np.zeros(m)
    for i in range(m):
        ypred[i] = (xmat[i] @ localWeight(xmat[i], xmat, ymat, k)).item()
    return ypred
def graphPlot(X, ypred, bill, tip):
    sortindex = X[:, 1].argsort()
    xsort = X[sortindex]
    fig = plt.figure()
    ax = fig.add_subplot(1, 1, 1)
    ax.scatter(bill, tip, color='green')
    ax.plot(xsort[:, 1], ypred[sortindex], color='red', linewidth=2)
    plt.xlabel('Total bill')
    plt.ylabel('Tip')
    plt.title(f'Locally Weighted Linear Regression for k ={k}')
    plt.show()
data = pd.read_csv('/content/tip.csv')
bill = np.array(data.total_bill, dtype=np.float64)
tip = np.array(data.tip, dtype=np.float64)
m = bill.shape[0]
X = np.column_stack((np.ones(m), bill))
y = tip.reshape(-1, 1)
k = 9
ypred = localWeightRegression(X, y, k)
graphPlot(X, ypred, bill, tip)

